<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>앤기브마케팅 상세</title>

    {{>layouts/meta}}

    <style>

        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
            overflow-x: hidden;
        }

        body.overflow-hidden {
            overflow: hidden;
        }

        .grid-row {
            display: grid;
            grid-template-columns: 1fr;
            gap: 25px;
        }

        @media (max-width: 480px) {
            .grid-row {
                grid-template-columns: 1fr;
            }
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* 헤더 영역 */
        .dashboard-container .header-section {
            margin-bottom: 25px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .dashboard-container .header-section .project-info {
            flex: 1;
        }

        .dashboard-container .header-section .project-title-section {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .dashboard-container .header-section .project-title {
            font-size: 28px;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

        .dashboard-container .header-section .project-period {
            font-size: 15px;
            color: #6b7280;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .dashboard-container .header-section .project-target-address {
            font-size: 13px;
            color: #9ca3af;
            font-weight: 500;
            margin-bottom: 15px;
        }

        .dashboard-container .header-section .project-meta {
            display: block;
            align-items: center;
        }

        .dashboard-container .header-section .project-meta-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
            margin-bottom: 10px;
        }

        .dashboard-container .header-section .project-meta-label {
            font-size: 14px;
            color: #6b7280;
            font-weight: 600;
        }

        .dashboard-container .header-section .project-meta-value {
            font-size: 16px;
            color: #1f2937;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .dashboard-container .header-section .header-buttons {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .dashboard-container .header-section .project-action-button {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(239, 68, 68, 0.2);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .dashboard-container .header-section .project-action-button.start {
            background: linear-gradient(135deg, #10b981, #059669);
            box-shadow: 0 4px 10px rgba(16, 185, 129, 0.2);
        }

        .dashboard-container .header-section .project-action-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(239, 68, 68, 0.3);
        }

        .dashboard-container .header-section .project-action-button.start:hover {
            box-shadow: 0 6px 15px rgba(16, 185, 129, 0.3);
        }

        .dashboard-container .header-section .project-traffic-button {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(139, 92, 246, 0.2);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .dashboard-container .header-section .project-traffic-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(139, 92, 246, 0.3);
        }

        .dashboard-container .header-section .project-settings-button {
            background: linear-gradient(135deg, #6b7280, #4b5563);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(107, 114, 128, 0.2);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .dashboard-container .header-section .project-settings-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(107, 114, 128, 0.3);
        }

        /* 통계 카드 */
        .dashboard-container .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .dashboard-container .stats-section .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }

        .dashboard-container .stats-section .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .dashboard-container .stats-section .stat-inner {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .dashboard-container .stats-section .text-group .txt {
            font-size: 15px;
            font-weight: 700;
            color: #6b7280;
            margin-bottom: 5px;
        }

        .dashboard-container .stats-section .text-group .tit {
            font-weight: 700;
            font-size: 28px;
            margin: 0;
            color: #1f2937;
        }

        .dashboard-container .stats-section .stat-icon {
            display: flex;
            border-radius: 50%;
            width: 55px;
            height: 55px;
            justify-content: center;
            align-items: center;
        }

        .dashboard-container .stats-section .stat-icon.green {
            background-color: rgba(209, 250, 229, 1);
        }

        .dashboard-container .stats-section .stat-icon.green i {
            color: #03c75a;
            font-size: 22px;
        }

        .dashboard-container .stats-section .stat-icon.blue {
            background-color: rgba(219, 234, 254, 1);
        }

        .dashboard-container .stats-section .stat-icon.blue i {
            color: #3b82f6;
            font-size: 22px;
        }

        .dashboard-container .stats-section .stat-icon.indigo {
            background-color: rgba(224, 231, 255, 1);
        }

        .dashboard-container .stats-section .stat-icon.indigo i {
            color: #4f46e5;
            font-size: 22px;
        }

        /* 콘텐츠 영역 */
        .dashboard-container .content-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin-bottom: 30px;
        }

        /* 오늘의 진척도 */
        .dashboard-container .content-section .progress-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .dashboard-container .content-section .progress-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .dashboard-container .content-section .progress-icon {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
            width: 45px;
            height: 45px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
        }

        .dashboard-container .content-section .progress-title {
            font-size: 20px;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

        .dashboard-container .content-section .progress-stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .dashboard-container .content-section .progress-stat {
            text-align: center;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 16px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            flex: 1;
            margin: 0 5px;
        }

        .dashboard-container .content-section .progress-stat:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .dashboard-container .content-section .progress-stat::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #020ee2, #5d66ff);
        }

        .dashboard-container .content-section .progress-stat:nth-child(2)::before {
            background: linear-gradient(90deg, #10b981, #059669);
        }

        .dashboard-container .content-section .progress-stat-value {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .dashboard-container .content-section .progress-stat-label {
            font-size: 14px;
            color: #6b7280;
            font-weight: 600;
        }

        .dashboard-container .content-section .progress-bar-container {
            margin-bottom: 20px;
        }

        .dashboard-container .content-section .progress-bar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .dashboard-container .content-section .progress-label {
            font-size: 14px;
            font-weight: 600;
            color: #374151;
        }

        .dashboard-container .content-section .progress-percentage {
            font-size: 14px;
            font-weight: 700;
            color: #020ee2;
        }

        .dashboard-container .content-section .progress-bar-track {
            width: 100%;
            height: 8px;
            background: rgba(2, 14, 226, 0.08);
            border-radius: 4px;
            overflow: hidden;
        }

        .dashboard-container .content-section .progress-bar-fill {
            height: 100%;
            background: linear-gradient(90deg, #020ee2, #5d66ff);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        /* Additional Stats 개선된 디자인 */
        .dashboard-container .content-section .additional-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .dashboard-container .content-section .additional-stat {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 16px;
            text-align: center;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .dashboard-container .content-section .additional-stat:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .dashboard-container .content-section .additional-stat::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #020ee2, #5d66ff);
        }

        .dashboard-container .content-section .additional-stat:nth-child(2)::before {
            background: linear-gradient(90deg, #10b981, #059669);
        }

        .dashboard-container .content-section .additional-stat-value {
            font-size: 20px;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .dashboard-container .content-section .additional-stat-value i {
            font-size: 16px;
            color: #020ee2;
        }

        .dashboard-container .content-section .additional-stat:nth-child(2) .additional-stat-value i {
            color: #10b981;
        }

        .dashboard-container .content-section .additional-stat-label {
            font-size: 13px;
            color: #6b7280;
            font-weight: 600;
        }

        .dashboard-container .content-section .info-note {
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
            border: 1px solid #bae6fd;
            border-radius: 10px;
            padding: 12px 16px;
        }

        .dashboard-container .content-section .info-note-text {
            font-size: 14px;
            color: #0369a1;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* 차트 카드 */
        .dashboard-container .content-section .chart-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .dashboard-container .content-section .chart-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .dashboard-container .content-section .chart-icon {
            background: rgba(79, 70, 229, 0.1);
            color: #4f46e5;
            width: 45px;
            height: 45px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
        }

        .dashboard-container .content-section .chart-title {
            font-size: 20px;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

        .dashboard-container .content-section .chart-container {
            position: relative;
            height: 280px;
        }

        /* 트래픽 소스 목록 섹션 */
        .dashboard-container .traffic-sources-section {
            background: white;
            border-radius: 15px;
            padding: 25px 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
        }

        .dashboard-container .traffic-sources-section .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .dashboard-container .traffic-sources-section .section-title {
            font-size: 24px;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

        .dashboard-container .traffic-sources-section .add-source-btn {
            background: linear-gradient(135deg, #020ee2, #5d66ff);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 16px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .dashboard-container .traffic-sources-section .add-source-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(2, 14, 226, 0.3);
        }

        .dashboard-container .traffic-sources-section .sources-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }

        .dashboard-container .traffic-sources-section .source-card {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            position: relative;
            transition: all 0.3s ease;
        }

        .dashboard-container .traffic-sources-section .source-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .dashboard-container .traffic-sources-section .source-card:hover .source-actions {
            opacity: 1;
            visibility: visible;
        }

        .dashboard-container .traffic-sources-section .source-actions {
            position: absolute;
            top: 15px;
            right: 15px;
            display: flex;
            gap: 8px;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .dashboard-container .traffic-sources-section .source-action-btn {
            background: white;
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .dashboard-container .traffic-sources-section .source-action-btn.edit {
            color: #020ee2;
        }

        .dashboard-container .traffic-sources-section .source-action-btn.delete {
            color: #ef4444;
        }

        .dashboard-container .traffic-sources-section .source-action-btn:hover {
            transform: scale(1.1);
        }

        .dashboard-container .traffic-sources-section .source-name {
            font-size: 18px;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 8px;
        }

        .dashboard-container .traffic-sources-section .source-path {
            font-size: 14px;
            font-weight: 500;
            color: #6b7280;
            margin-bottom: 12px;
            word-break: break-all;
        }

        .dashboard-container .traffic-sources-section .source-meta {
            display: flex;
            gap: 8px;
            font-size: 12px;
            flex-wrap: wrap;
        }

        .dashboard-container .traffic-sources-section .source-badge {
            padding: 4px 10px;
            border-radius: 12px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .dashboard-container .traffic-sources-section .source-badge.scroll-yes {
            background: rgba(16, 185, 129, 0.1);
            color: #059669;
        }

        .dashboard-container .traffic-sources-section .source-badge.scroll-no {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .dashboard-container .traffic-sources-section .source-badge.duration {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        /* 트래픽 히스토리 섹션 */
        .dashboard-container .traffic-history-section {
            background: white;
            border-radius: 15px;
            padding: 25px 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
        }

        .dashboard-container .traffic-history-section .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .dashboard-container .traffic-history-section .section-title {
            font-size: 24px;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

        .dashboard-container .traffic-history-section .search-container {
            display: flex;
            align-items: center;
            position: relative;
        }

        .dashboard-container .traffic-history-section .search-input {
            padding: 8px 40px 8px 12px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            color: #374151;
            background: white;
            min-width: 200px;
            transition: all 0.25s ease;
        }

        .dashboard-container .traffic-history-section .search-input:focus {
            outline: none;
            border-color: #020ee2;
            box-shadow: 0 0 0 3px rgba(2, 14, 226, 0.1);
        }

        .dashboard-container .traffic-history-section .search-button {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #6b7280;
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        .dashboard-container .traffic-history-section .search-button:hover {
            color: #020ee2;
            background: rgba(2, 14, 226, 0.1);
        }

        .dashboard-container .traffic-history-section .history-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-bottom: 20px;
            min-height: 400px;
        }

        .dashboard-container .traffic-history-section .history-card {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            padding: 20px 25px;
            transition: all 0.3s ease;
            display: grid;
            grid-template-columns: 150px 1fr 200px;
            gap: 20px;
            align-items: center;
            cursor: pointer;
        }

        .dashboard-container .traffic-history-section .history-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            border-color: #d1d5db;
        }

        .dashboard-container .traffic-history-section .history-card.skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
            border: 1px solid #e5e7eb;
        }

        @keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }

        .dashboard-container .traffic-history-section .skeleton-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .dashboard-container .traffic-history-section .skeleton-line {
            height: 16px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }

        .dashboard-container .traffic-history-section .skeleton-line.ip {
            height: 20px;
            width: 30%;
        }

        .dashboard-container .traffic-history-section .skeleton-line.meta {
            height: 14px;
            width: 60%;
        }

        .dashboard-container .traffic-history-section .history-ip {
            font-size: 18px;
            font-weight: 700;
            color: #1f2937;
        }

        .dashboard-container .traffic-history-section .history-main {
            display: flex;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
        }

        .dashboard-container .traffic-history-section .history-meta-item {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 14px;
            color: #6b7280;
        }

        .dashboard-container .traffic-history-section .history-meta-item i {
            color: #9ca3af;
            width: 16px;
        }

        .dashboard-container .traffic-history-section .history-source {
            text-align: right;
        }

        .dashboard-container .traffic-history-section .history-source-name {
            font-size: 14px;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 5px;
        }

        .dashboard-container .traffic-history-section .history-badges {
            display: flex;
            gap: 6px;
            justify-content: flex-end;
            flex-wrap: wrap;
        }

        .dashboard-container .traffic-history-section .scroll-badge {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .dashboard-container .traffic-history-section .scroll-badge.yes {
            background: rgba(16, 185, 129, 0.1);
            color: #059669;
        }

        .dashboard-container .traffic-history-section .scroll-badge.no {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .dashboard-container .traffic-history-section .device-badge {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            position: relative;
        }

        .dashboard-container .traffic-history-section .device-badge.pc {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .dashboard-container .traffic-history-section .device-badge.mobile {
            background: rgba(245, 158, 11, 0.1);
            color: #f59e0b;
        }

        .dashboard-container .traffic-history-section .device-tooltip {
            position: absolute;
            bottom: calc(100% + 8px);
            right: 0;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 11px;
            white-space: nowrap;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            max-width: 350px;
            white-space: normal;
            word-break: break-all;
        }

        .dashboard-container .traffic-history-section .device-tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            right: 10px;
            border: 5px solid transparent;
            border-top-color: rgba(0, 0, 0, 0.9);
        }

        .dashboard-container .traffic-history-section .device-badge:hover .device-tooltip {
            opacity: 1;
            visibility: visible;
        }

        .dashboard-container .traffic-history-section .history-pagination {
            display: flex;
            justify-content: center;
            gap: 8px;
            align-items: center;
        }

        /* 페이지 버튼 공통 스타일 */
        .page-button {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 8px 12px;
            color: #374151;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 36px;
            text-align: center;
        }

        .page-button:hover {
            background: #f8faff;
            border-color: #020ee2;
            color: #020ee2;
        }

        .page-button.active {
            background: #020ee2;
            border-color: #020ee2;
            color: white;
        }

        .page-button:disabled {
            background: #f9fafb;
            border-color: #e2e8f0;
            color: #9ca3af;
            cursor: not-allowed;
        }

        .page-button:disabled:hover {
            background: #f9fafb;
            border-color: #e2e8f0;
            color: #9ca3af;
        }

        /* 모달 공통 스타일 */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1200;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            backdrop-filter: blur(4px);
        }

        .modal.show {
            opacity: 1;
            visibility: visible;
        }

        .modal .modal-content {
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            transform: translateY(-20px) scale(0.95);
            transition: all 0.3s ease;
            max-height: 90vh;
            overflow: hidden;
            width: 90%;
            max-width: 500px;
        }

        .modal.show .modal-content {
            transform: translateY(0) scale(1);
        }

        .modal .modal-header {
            padding: 25px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e5e7eb;
            background: linear-gradient(135deg, #020ee2, #5d66ff);
            color: white;
            border-radius: 16px 16px 0 0;
        }

        .modal .modal-title {
            font-size: 20px;
            font-weight: 700;
            margin: 0;
        }

        .modal .modal-close {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            font-size: 20px;
            color: white;
            cursor: pointer;
            padding: 8px;
            line-height: 1;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            transition: all 0.2s ease;
        }

        .modal .modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .modal .modal-body {
            padding: 30px;
            max-height: calc(90vh - 180px);
            overflow-y: auto;
        }

        .modal .modal-footer {
            padding: 25px 30px;
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            border-top: 1px solid #e5e7eb;
            background: #f8fafc;
            border-radius: 0 0 16px 16px;
        }

        .modal .modal-button {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.25s ease;
        }

        .modal .modal-button-cancel {
            background: #f3f4f6;
            color: #4b5563;
        }

        .modal .modal-button-cancel:hover {
            background: #e5e7eb;
        }

        .modal .modal-button-primary {
            background: linear-gradient(135deg, #020ee2, #5d66ff);
            color: white;
            box-shadow: 0 2px 8px rgba(2, 14, 226, 0.2);
        }

        .modal .modal-button-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(2, 14, 226, 0.3);
        }

        .modal .modal-button-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.2);
        }

        .modal .modal-button-danger:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }

        .modal .form-group {
            margin-bottom: 20px;
        }

        .modal .form-label {
            font-size: 16px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
            display: block;
        }

        .modal .form-input, .modal .form-textarea {
            width: 100%;
            padding: 14px 18px;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            color: #374151;
            transition: all 0.25s ease;
            box-sizing: border-box;
        }

        .modal .form-textarea {
            min-height: 100px;
            resize: vertical;
            font-family: inherit;
        }

        .modal .form-input:focus, .modal .form-textarea:focus {
            outline: none;
            border-color: #020ee2;
            box-shadow: 0 0 0 3px rgba(2, 14, 226, 0.1);
        }

        /* Time Input Group */
        .time-input-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .time-input-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .time-input-item input {
            width: 60px;
            padding: 10px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            text-align: center;
        }

        .time-input-item input:focus {
            outline: none;
            border-color: #020ee2;
            box-shadow: 0 0 0 3px rgba(2, 14, 226, 0.1);
        }

        .time-input-item span {
            font-size: 14px;
            color: #6b7280;
            font-weight: 600;
        }

        /* Custom Dropdown */
        .custom-dropdown {
            position: relative;
        }

        .dropdown-button {
            width: 100%;
            padding: 14px 18px;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            color: #374151;
            background: white;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.25s ease;
        }

        .dropdown-button:hover {
            border-color: #020ee2;
        }

        .dropdown-button.active {
            border-color: #020ee2;
            box-shadow: 0 0 0 3px rgba(2, 14, 226, 0.1);
        }

        .dropdown-arrow {
            transition: transform 0.3s ease;
        }

        .dropdown-button.active .dropdown-arrow {
            transform: rotate(180deg);
        }

        .dropdown-menu {
            position: absolute;
            top: calc(100% + 5px);
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            z-index: 1100;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            max-height: 200px;
            overflow-y: auto;
            display: none;
        }

        .dropdown-menu.show {
            display: block;
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .dropdown-item {
            padding: 10px 15px;
            cursor: pointer;
            font-size: 14px;
            color: #374151;
            transition: all 0.2s ease;
        }

        .dropdown-item:hover {
            background: #f8faff;
            color: #020ee2;
        }

        .dropdown-item:first-child {
            border-radius: 8px 8px 0 0;
        }

        .dropdown-item:last-child {
            border-radius: 0 0 8px 8px;
        }

        /* 프로젝트 설정 모달 스타일 */
        .settings-modal .form-group {
            margin-bottom: 20px;
        }

        .settings-modal .form-label {
            display: block;
            font-size: 16px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }

        .settings-modal .form-label .required {
            color: #ef4444;
        }

        .settings-modal .form-input {
            width: 100%;
            padding: 14px 18px;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            color: #374151;
            transition: all 0.25s ease;
            background: white;
            box-sizing: border-box;
        }

        .settings-modal .form-input:focus {
            outline: none;
            border-color: #020ee2;
            box-shadow: 0 0 0 3px rgba(2, 14, 226, 0.1);
        }

        /* 반응형 */
        @media (max-width: 1024px) {
            .dashboard-container .traffic-sources-section .sources-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 768px) {
            .dashboard-container {
                padding: 15px;
            }

            .dashboard-container .header-section {
                flex-direction: column;
                gap: 15px;
                align-items: flex-start;
            }

            .dashboard-container .stats-section {
                grid-template-columns: 1fr;
            }

            .dashboard-container .content-section {
                grid-template-columns: 1fr;
            }

            .dashboard-container .traffic-sources-section .sources-grid {
                grid-template-columns: 1fr;
            }

            .dashboard-container .traffic-history-section .history-card {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .dashboard-container .traffic-history-section .history-source {
                text-align: left;
            }

            .dashboard-container .traffic-history-section .history-badges {
                justify-content: flex-start;
            }
        }
    </style>
</head>
<body>

{{>layouts/loader}}
{{>layouts/header}}

<div class="main-content">
    <div class="dashboard-container">
        <!-- 헤더 영역 -->
        <div id="main-group" class="grid-row">
            <div class="header-section">
                <div class="project-info">
                    <div class="project-title-section">
                        <h1 class="project-title">{{project.name}}</h1>
                    </div>
                    <div class="project-period" id="projectPeriod"></div>
                    <div class="project-target-address" id="projectTargetAddress">{{project.targetAddress}}</div>
                </div>
                <div class="header-buttons">
                    <button class="project-action-button" id="projectActionBtn" onclick="stopProjects()">
                        <i class="fas fa-pause"></i>
                        취소
                    </button>
                    <button class="project-traffic-button" id="projectTrafficBtn" onclick="toggleTrafficType()">
                        <i class="fas fa-wifi"></i>
                        <span id="trafficTypeText">{{project.trafficType.label}}</span>
                    </button>
                    <button class="project-settings-button" onclick="openSettingsModal()">
                        <i class="fas fa-cog"></i>
                        설정
                    </button>
                </div>
            </div>
        </div>

        <!-- 통계 카드 -->
        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-inner">
                    <div class="text-group">
                        <p class="txt">총 목표 유입량</p>
                        <h2 class="tit" id="targetCount">{{totalTargetTrafficCount}}개</h2>
                    </div>
                    <div class="stat-icon green">
                        <i class="fas fa-bullseye"></i>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-inner">
                    <div class="text-group">
                        <p class="txt">일 목표 유입량</p>
                        <h2 class="tit" id="dailyTarget2" style="color: #3b82f6;">{{dailyTargetTrafficCount}}개</h2>
                    </div>
                    <div class="stat-icon blue">
                        <i class="fas fa-calendar-alt"></i>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-inner">
                    <div class="text-group">
                        <p class="txt">남은 유입량 합계</p>
                        <h2 class="tit" id="remainingCount" style="color: #4f46e5;">{{remainingTotalTargetTrafficCount}}개</h2>
                    </div>
                    <div class="stat-icon indigo">
                        <i class="fas fa-clock"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- 콘텐츠 영역 -->
        <div class="content-section">
            <!-- 오늘의 진척도 -->
            <div class="progress-card">
                <div class="progress-header">
                    <div class="progress-icon">
                        <i class="fas fa-calendar-day"></i>
                    </div>
                    <h3 class="progress-title">오늘의 진척도</h3>
                </div>

                <div class="progress-stats">
                    <div class="progress-stat">
                        <div class="progress-stat-value" id="dailyTarget" style="color: #3b82f6;">{{dailyTargetTrafficCount}}</div>
                        <div class="progress-stat-label">일 목표량</div>
                    </div>
                    <div class="progress-stat">
                        <div class="progress-stat-value" id="dailyUploaded" style="color: #10b981;">{{todayTrafficSourceRecordCount}}</div>
                        <div class="progress-stat-label">오늘 유입</div>
                    </div>
                </div>

                <div class="progress-bar-container">
                    <div class="progress-bar-header">
                        <span class="progress-label">일일 진척도</span>
                        <span class="progress-percentage" id="dailyProgress">90%</span>
                    </div>
                    <div class="progress-bar-track">
                        <div class="progress-bar-fill" id="dailyProgressFill" style="width: 90%;"></div>
                    </div>
                </div>

                <div class="additional-stats">
                    <div class="additional-stat">
                        <div class="additional-stat-value">
                            <i class="fas fa-clock"></i>
                            10시
                        </div>
                        <div class="additional-stat-label">유입 피크 타임</div>
                    </div>
                    <div class="additional-stat">
                        <div class="additional-stat-value">
                            <i class="fas fa-hourglass-half"></i>
                            17.47분
                        </div>
                        <div class="additional-stat-label">평균 유입 간격</div>
                    </div>
                </div>

                <div class="info-note">
                    <p class="info-note-text" id="dailyMessage">
                        <i class="fas fa-info-circle"></i> 오늘 목표까지 {{remainingTodayTargetTrafficCount}}개가 남았습니다!
                    </p>
                </div>
            </div>

            <!-- 일별 발행량 차트 -->
            <div class="chart-card">
                <div class="chart-header">
                    <div class="chart-icon">
                        <i class="fas fa-chart-bar"></i>
                    </div>
                    <h3 class="chart-title">일별 유입량</h3>
                </div>
                <div class="chart-container">
                    <div id="dailyChart"></div>
                </div>
            </div>
        </div>

        <!-- 트래픽 소스 목록 -->
        <div class="traffic-sources-section">
            <div class="section-header">
                <h3 class="section-title">트래픽 소스 목록</h3>
                <button class="add-source-btn" onclick="openAddSourceModal()">
                    <i class="fas fa-plus"></i>
                    추가
                </button>
            </div>
            <div class="sources-grid" id="sourcesGrid">
                {{#trafficSources}}
                    <div class="source-card" data-source-id="{{id}}">
                        <div class="source-actions">
                            <button class="source-action-btn edit" onclick="editSource({{id}})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="source-action-btn delete" onclick="deleteSource({{id}})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                        <div class="source-name">{{trafficSourcePath}}</div>
                        <div class="source-meta">
                            {{#useScroll}}
                                <span class="source-badge scroll-yes">
                            <i class="fas fa-check-circle"></i> 스크롤 포함
                        </span>
                            {{/useScroll}}
                            {{^useScroll}}
                                <span class="source-badge scroll-no">
                            <i class="fas fa-times-circle"></i> 스크롤 제외
                        </span>
                            {{/useScroll}}
                            <span class="source-badge duration">
                            <i class="fas fa-hourglass-half"></i> <span class="duration-text" data-seconds="{{stayDurationTime}}"></span>
                        </span>
                        </div>
                    </div>
                {{/trafficSources}}
            </div>
        </div>

        <!-- 트래픽 히스토리 -->
        <div class="traffic-history-section">
            <div class="section-header">
                <h3 class="section-title">트래픽 히스토리</h3>
                <div class="search-container">
                    <input type="text" class="search-input" id="historySearchInput" placeholder="IP 검색...">
                    <button class="search-button" onclick="performHistorySearch()">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            <div class="history-list" id="historyList">
                <!-- 스켈레톤 로딩 -->
            </div>

            <div class="history-pagination" id="historyPagination">
                <button class="page-button" disabled>
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button class="page-button active">1</button>
                <button class="page-button">2</button>
                <button class="page-button">3</button>
                <button class="page-button">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>

        <!-- 트래픽 소스 추가/편집 모달 -->
        <div class="modal" id="sourceModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title" id="sourceModalTitle">트래픽 소스 추가</h3>
                    <button class="modal-close" onclick="closeSourceModal()">×</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label class="form-label">트래픽 경로</label>
                        <input type="text" class="form-input" id="sourcePathInput" placeholder="트래픽 경로를 입력해주세요">
                    </div>
                    <div class="form-group">
                        <label class="form-label">스크롤 여부</label>
                        <div class="custom-dropdown" id="scrollDropdown">
                            <div class="dropdown-button" data-value="true">
                                <span>스크롤 포함</span>
                                <i class="fas fa-chevron-down dropdown-arrow"></i>
                            </div>
                            <div class="dropdown-menu">
                                <div class="dropdown-item" data-value="true">스크롤 포함</div>
                                <div class="dropdown-item" data-value="false">스크롤 제외</div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">체류 시간</label>
                        <div class="time-input-group">
                            <div class="time-input-item">
                                <input type="number" id="sourceHourInput" value="0" min="0" max="23">
                                <span>시간</span>
                            </div>
                            <div class="time-input-item">
                                <input type="number" id="sourceMinuteInput" value="0" min="0" max="59">
                                <span>분</span>
                            </div>
                            <div class="time-input-item">
                                <input type="number" id="sourceSecondInput" value="30" min="0" max="59">
                                <span>초</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="modal-button modal-button-cancel" onclick="closeSourceModal()">닫기</button>
                    <button class="modal-button modal-button-primary" id="saveSourceBtn">저장하기</button>
                </div>
            </div>
        </div>

        <!-- 프로젝트 설정 모달 -->
        <div class="modal settings-modal" id="settingsModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">프로젝트 설정 편집</h3>
                    <button class="modal-close" onclick="closeSettingsModal()">×</button>
                </div>
                <div class="modal-body">
                    <form id="settingsForm">
                        <!-- 프로젝트명 -->
                        <div class="form-group">
                            <label class="form-label">프로젝트 명 <span class="required">*</span></label>
                            <input type="text" class="form-input" id="settingsProjectName" name="projectName" placeholder="프로젝트 이름을 입력해주세요." required>
                        </div>

                        <!-- 대상 주소 -->
                        <div class="form-group">
                            <label class="form-label">대상 주소 <span class="required">*</span></label>
                            <input type="text" class="form-input" id="settingsTargetAddress" name="targetAddress" placeholder="https://example.com" required>
                        </div>

                        <!-- 프로젝트 시작일 -->
                        <div class="form-group">
                            <label class="form-label">프로젝트 시작일 <span class="required">*</span></label>
                            <input type="date" class="form-input" id="settingsStartDate" name="startDate" required>
                        </div>

                        <!-- 프로젝트 종료일 -->
                        <div class="form-group">
                            <label class="form-label">프로젝트 종료일</label>
                            <input type="date" class="form-input" id="settingsEndDate" name="endDate">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="modal-button modal-button-cancel" onclick="closeSettingsModal()">취소</button>
                    <button type="button" class="modal-button modal-button-primary" id="submitSettingsBtn">편집하기</button>
                </div>
            </div>
        </div>
    </div>
</div>

{{>layouts/script}}
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>

    $('#headerTitle').text('{{project.name}}');

    // ===============================
    // 프로젝트 대시보드 스크립트 (트래픽 버전)
    // ===============================

    // ---------------------------------
    // 프로젝트/전역 상태
    // ---------------------------------
    const dailyTargetTrafficCount = {{dailyTargetTrafficCount}};
    const totalTargetTrafficCount = {{totalTargetTrafficCount}};
    const remainingTotalTargetTrafficCount = {{remainingTotalTargetTrafficCount}};
    const todayTrafficSourceRecordCount = {{todayTrafficSourceRecordCount}};
    const remainingTodayTargetTrafficCount = {{remainingTodayTargetTrafficCount}};

    let projectStatus = '{{project.status}}';
    const currentProjectId = '{{project.id}}';
    const projectCreatedAt = '{{project.createdAt}}'; // createdAt 추가

    // 트래픽 타입 순환 배열
    const trafficTypes = [
        { value: 'DEDICATED_PROXY', label: '고정 IP' },
        { value: 'DATACENTER_PROXY', label: '유동 IP' },
        { value: 'TETHERING', label: '테더링' }
    ];
    let currentTrafficType = '{{project.trafficType}}';

    // 트래픽 페이징 전역
    let historyPage = 0;
    let historyPageSize = 10;
    let currentSearchQuery = '';
    let historyLoading = false;

    // 트래픽 소스 편집 상태
    let currentEditingSourceId = null;

    // 날짜 변수
    const startDate = '{{project.startDate}}';
    const endDate = '{{#project.endDate}}{{project.endDate}}{{/project.endDate}}{{^project.endDate}}{{/project.endDate}}';

    // 트래픽 소스 맵 (ID로 조회)
    const trafficSourcesMap = {};
        {{#trafficSources}}
        trafficSourcesMap[{{id}}] = {
            id: {{id}},
            trafficSourcePath: '{{trafficSourcePath}}',
            useScroll: {{useScroll}},
            stayDurationTime: {{stayDurationTime}}
        };
        {{/trafficSources}}

    if (projectStatus === 'ONGOING') {
        $('.header-buttons').html(`<button class="project-action-button" id="projectActionBtn" onclick="toggleProjectStatus('CANCELED')">
                                <i class="fas fa-pause"></i>
                                취소
                    </button>
                    <button class="project-traffic-button" id="projectTrafficBtn" onclick="toggleTrafficType()">
                        <i class="fas fa-wifi"></i>
                        <span id="trafficTypeText">${getTrafficTypeLabel(currentTrafficType)}</span>
                    </button>
                    <button class="project-settings-button" onclick="openSettingsModal()">
                        <i class="fas fa-cog"></i>
                        설정
                    </button>`);
    } else {
        $('.header-buttons').html(`<button class="project-action-button start" id="projectActionBtn" onclick="toggleProjectStatus('ONGOING')">
                                <i class="fas fa-play"></i>
                                시작
                    </button>
                    <button class="project-traffic-button" id="projectTrafficBtn" onclick="toggleTrafficType()">
                        <i class="fas fa-wifi"></i>
                        <span id="trafficTypeText">${getTrafficTypeLabel(currentTrafficType)}</span>
                    </button>
                    <button class="project-settings-button" onclick="openSettingsModal()">
                        <i class="fas fa-cog"></i>
                        설정
                    </button>`);
    }

    // ---------------------------------
    // 초기화
    // ---------------------------------
    $(document).ready(function () {
        initializeChart();
        initializeEventHandlers();
        updateStatistics();
        updateProjectPeriod();
        loadHistory(0);
        formatAllDurations();
        unLoadPreloader(1000);
    });

    // ---------------------------------
    // 유틸리티 함수
    // ---------------------------------
    function getTrafficTypeLabel(type) {
        const found = trafficTypes.find(t => t.value === type);
        return found ? found.label : type;
    }

    function formatDuration(seconds) {
        if (seconds === 0) return '0초';

        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;

        let result = '';
        if (hours > 0) result += hours + '시간 ';
        if (minutes > 0) result += minutes + '분 ';
        if (secs > 0 || result === '') result += secs + '초';

        return result.trim();
    }

    function formatAllDurations() {
        $('.duration-text').each(function() {
            const seconds = parseInt($(this).data('seconds'));
            $(this).text(formatDuration(seconds));
        });
    }

    function secondsToTimeInputs(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return { hours, minutes, secs };
    }

    function timeInputsToSeconds() {
        const hours = parseInt($('#sourceHourInput').val()) || 0;
        const minutes = parseInt($('#sourceMinuteInput').val()) || 0;
        const seconds = parseInt($('#sourceSecondInput').val()) || 0;
        return hours * 3600 + minutes * 60 + seconds;
    }

    function removeHttpPrefix(url) {
        if (!url) return url;
        return url.replace(/^https?:\/\//, '');
    }

    function formatDateTime(dateTimeStr) {
        if (!dateTimeStr) return '';
        const date = new Date(dateTimeStr);
        const yyyy = date.getFullYear();
        const mm = String(date.getMonth() + 1).padStart(2, '0');
        const dd = String(date.getDate()).padStart(2, '0');
        const hh = String(date.getHours()).padStart(2, '0');
        const min = String(date.getMinutes()).padStart(2, '0');
        const ss = String(date.getSeconds()).padStart(2, '0');
        return `${yyyy}-${mm}-${dd} ${hh}:${min}:${ss}`;
    }

    // ---------------------------------
    // 1. 프로젝트 상태 값 변경 (ONGOING/CANCELED/COMPLETED)
    // ---------------------------------
    function toggleProjectStatus(newStatus) {
        const statusLabel = newStatus === 'ONGOING' ? '시작' : newStatus === 'CANCELED' ? '취소' : '완료';
        const confirmMsg = newStatus === 'ONGOING' ? '프로젝트를 시작하시겠어요?' :
                newStatus === 'CANCELED' ? '프로젝트를 취소하시겠어요?' : '프로젝트를 완료하시겠어요?';

        showCustomAlert(confirmMsg, `프로젝트 상태가 "${statusLabel}"로 변경됩니다.`, [
            {
                text: statusLabel + '하기',
                class: 'alert-modal-button alert-modal-button-primary',
                action: function () {
                    hideCustomAlert();
                    loadPreloader(0);

                    const projectData = {
                        id: currentProjectId,
                        name: '{{project.name}}',
                        targetAddress: '{{project.targetAddress}}',
                        startDate: '{{project.startDate}}',
                        endDate: endDate || null,
                        status: newStatus,
                        trafficType: currentTrafficType,
                        dailyTargetTrafficCount: {{dailyTargetTrafficCount}},
                        totalTargetTrafficCount: {{totalTargetTrafficCount}},
                        createdAt: projectCreatedAt
                    };

                    $.ajax({
                        url: '/api/project/update',
                        method: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(projectData),
                        success: function () {
                            unLoadPreloader(500);
                            showCustomAlert('상태 변경 완료!', `프로젝트가 "${statusLabel}" 상태로 변경되었습니다.`, [{
                                text: '닫기',
                                class: 'alert-modal-button alert-modal-button-secondary',
                                action: function () {
                                    window.location.reload();
                                }
                            }]);
                        },
                        error: function (xhr) {
                            let msg = '프로젝트 상태를 변경할 수 없습니다.';
                            try {
                                if (xhr.responseJSON?.error?.message) {
                                    msg = xhr.responseJSON.error.message;
                                }
                            } catch (e) {}
                            unLoadPreloader(500);
                            showCustomAlert('상태 변경 실패', msg);
                        }
                    });
                }
            },
            {
                text: '닫기',
                class: 'alert-modal-button alert-modal-button-secondary',
                action: function () {
                    hideCustomAlert();
                }
            }
        ]);
    }

    // ---------------------------------
    // 2. 트래픽 타입 토글 (비동기)
    // ---------------------------------
    function toggleTrafficType() {
        const currentIndex = trafficTypes.findIndex(t => t.value === currentTrafficType);
        const nextIndex = (currentIndex + 1) % trafficTypes.length;
        const nextTrafficType = trafficTypes[nextIndex].value;
        const nextLabel = trafficTypes[nextIndex].label;

        loadPreloader(0);

        const projectData = {
            id: currentProjectId,
            name: '{{project.name}}',
            targetAddress: '{{project.targetAddress}}',
            startDate: '{{project.startDate}}',
            endDate: endDate || null,
            status: projectStatus,
            trafficType: nextTrafficType,
            dailyTargetTrafficCount: {{dailyTargetTrafficCount}},
            totalTargetTrafficCount: {{totalTargetTrafficCount}},
            createdAt: projectCreatedAt
        };

        $.ajax({
            url: '/api/project/update',
            method: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(projectData),
            success: function () {
                currentTrafficType = nextTrafficType;
                $('#trafficTypeText').text(nextLabel);
                unLoadPreloader(500);
            },
            error: function (xhr) {
                let msg = '트래픽 타입을 변경할 수 없습니다.';
                try {
                    if (xhr.responseJSON?.error?.message) {
                        msg = xhr.responseJSON.error.message;
                    }
                } catch (e) {}
                showCustomAlert('트래픽 타입 변경 실패', msg);
                unLoadPreloader(1000);
            }
        });
    }

    // ---------------------------------
    // 프로젝트 기간 표시
    // ---------------------------------
    function updateProjectPeriod() {
        let periodText = startDate.substring(0, 10).replace(/-/g, '.') + ' ~';
        if (endDate && endDate !== '') {
            periodText = startDate.substring(0, 10).replace(/-/g, '.') + ' ~ ' + endDate.substring(0, 10).replace(/-/g, '.');
        }
        $('#projectPeriod').text(periodText);
    }

    // ---------------------------------
    // 통계/차트
    // ---------------------------------
    function updateStatistics() {
        $('#targetCount').text(totalTargetTrafficCount.toLocaleString() + '개');
        $('#dailyTarget2').text(dailyTargetTrafficCount.toLocaleString() + '개');
        $('#remainingCount').text(remainingTotalTargetTrafficCount.toLocaleString() + '개');

        $('#dailyTarget').text(dailyTargetTrafficCount.toLocaleString());
        $('#dailyUploaded').text(todayTrafficSourceRecordCount.toLocaleString());

        const p = Math.min((todayTrafficSourceRecordCount / dailyTargetTrafficCount) * 100, 100);
        $('#dailyProgress').text(Math.round(p) + '%');
        $('#dailyProgressFill').css('width', p + '%');

        if (todayTrafficSourceRecordCount >= dailyTargetTrafficCount) {
            $('#dailyMessage').html('<i class="fas fa-check-circle"></i> 오늘 목표치인 ' + dailyTargetTrafficCount.toLocaleString() + '개를 모두 달성했어요!');
        } else {
            $('#dailyMessage').html('<i class="fas fa-info-circle"></i> 오늘 목표까지 ' + remainingTodayTargetTrafficCount.toLocaleString() + '개가 남았습니다!');
        }
    }

    function initializeChart() {
        const options = {
            series: [{
                name: '일별 유입량',
                data: [12, 18, 15, 20, 16, 14, 10]
            }],
            chart: {
                type: 'bar',
                height: 280,
                toolbar: {
                    show: false
                }
            },
            plotOptions: {
                bar: {
                    borderRadius: 6,
                    columnWidth: '60%',
                    distributed: true
                }
            },
            colors: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#10b981', '#8b5cf6', '#9ca3af'],
            dataLabels: {
                enabled: false
            },
            legend: {
                show: false
            },
            xaxis: {
                categories: ['월', '화', '수', '목', '금', '토', '일'],
                axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false
                }
            },
            yaxis: {
                show: true,
                labels: {
                    style: {
                        colors: '#6b7280'
                    }
                }
            },
            grid: {
                borderColor: '#e5e7eb',
                strokeDashArray: 5
            },
            tooltip: {
                y: {
                    formatter: function (val) {
                        return val + "개"
                    }
                }
            }
        };

        const chart = new ApexCharts(document.querySelector("#dailyChart"), options);
        chart.render();
    }

    // ---------------------------------
    // 이벤트 핸들러
    // ---------------------------------
    function initializeEventHandlers() {
        initializeDropdowns();

        $(document).on('click', '#historyPagination .page-button', function () {
            const page = $(this).data('page');
            if (page === undefined || page === null) return;
            if (historyLoading) return;
            loadHistory(page);
        });

        $('#historySearchInput').on('keypress', function (e) {
            if (e.which === 13) {
                performHistorySearch();
            }
        });
    }

    // ---------------------------------
    // 드롭다운 초기화
    // ---------------------------------
    function initializeDropdowns() {
        $(document).on('click', '.dropdown-button', function (e) {
            e.stopPropagation();
            const $this = $(this);
            const $menu = $this.siblings('.dropdown-menu');

            $('.dropdown-button').not($this).removeClass('active').siblings('.dropdown-menu').removeClass('show');

            $this.toggleClass('active');
            $menu.toggleClass('show');
        });

        $(document).on('click', '.dropdown-item', function (e) {
            e.stopPropagation();
            const $this = $(this);
            const value = $this.data('value');
            const text = $this.text();

            const $button = $this.closest('.dropdown-menu').siblings('.dropdown-button');
            $button.find('span').first().text(text);
            $button.attr('data-value', value);

            $button.removeClass('active');
            $this.closest('.dropdown-menu').removeClass('show');
        });

        $(document).click(function (e) {
            if (!$(e.target).closest('.custom-dropdown').length) {
                $('.dropdown-button').removeClass('active');
                $('.dropdown-menu').removeClass('show');
            }
        });
    }

    // ---------------------------------
    // 3. Settings Modal (프로젝트 설정 저장)
    // ---------------------------------
    function openSettingsModal() {
        $('#settingsProjectName').val('{{project.name}}');
        $('#settingsTargetAddress').val('{{project.targetAddress}}');

        const startDateValue = '{{project.startDate}}'.substring(0, 10);
        let endDateValue = '';
        if (endDate && endDate !== '') {
            endDateValue = endDate.substring(0, 10);
        }

        $('#settingsStartDate').val(startDateValue);
        $('#settingsEndDate').val(endDateValue);

        $('#settingsModal').addClass('show');
        $('body').addClass('overflow-hidden');
    }

    function closeSettingsModal() {
        $('#settingsModal').removeClass('show');
        $('body').removeClass('overflow-hidden');
    }

    $(document).on('click', '#submitSettingsBtn', function() {
        const projectName = $('#settingsProjectName').val().trim();
        const targetAddress = $('#settingsTargetAddress').val().trim();
        const startDateInput = $('#settingsStartDate').val();
        const endDateInput = $('#settingsEndDate').val();

        if (!projectName || !targetAddress || !startDateInput) {
            alert('필수 항목을 모두 입력해주세요.');
            return;
        }

        const projectData = {
            id: currentProjectId,
            name: projectName,
            targetAddress: targetAddress,
            startDate: startDateInput + 'T00:00:00',
            endDate: endDateInput ? endDateInput + 'T23:59:59' : null,
            status: projectStatus,
            trafficType: currentTrafficType,
            dailyTargetTrafficCount: {{dailyTargetTrafficCount}},
            totalTargetTrafficCount: {{totalTargetTrafficCount}},
            createdAt: projectCreatedAt
        };

        closeSettingsModal();
        loadPreloader(0);

        $.ajax({
            url: '/api/project/update',
            method: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(projectData),
            success: function() {
                unLoadPreloader(500);
                showCustomAlert('저장 완료', '프로젝트 설정이 변경되었습니다.', [{
                    text: '닫기',
                    class: 'alert-modal-button alert-modal-button-secondary',
                    action: function () {
                        window.location.reload();
                    }
                }]);
            },
            error: function(xhr) {
                let msg = '프로젝트 설정을 저장할 수 없습니다.';
                try {
                    if (xhr.responseJSON?.error?.message) {
                        msg = xhr.responseJSON.error.message;
                    }
                } catch (e) {}
                unLoadPreloader(500);
                showCustomAlert('저장 실패', msg);
            }
        });
    });

    // ---------------------------------
    // 5. 트래픽 히스토리 IP 검색 및 로드
    // ---------------------------------
    function performHistorySearch() {
        const query = $('#historySearchInput').val().trim();
        currentSearchQuery = query;
        historyPage = 0;
        loadHistory(0);
    }

    function loadHistory(page = 0) {
        if (historyLoading) return;
        historyLoading = true;
        historyPage = page;

        const params = {
            page: page,
            size: historyPageSize
        };

        if (currentSearchQuery) {
            params.ip = currentSearchQuery;
        }

        showHistorySkeleton();

        // Mustache에서 전달된 데이터 사용
        const trafficRecords = [
            {{#trafficSourceRecords}}
                {
                    id: {{id}},
                    ip: '{{ip}}',
                    createdAt: '{{createdAt}}',
                    trafficSourceId: {{trafficSourceId}},
                    userAgent: '{{userAgent}}'
                },
            {{/trafficSourceRecords}}
        ];

        // IP 필터링
        let filteredRecords = trafficRecords;
        if (currentSearchQuery) {
            filteredRecords = trafficRecords.filter(r => r.ip.includes(currentSearchQuery));
        }

        // 페이징 시뮬레이션
        setTimeout(function() {
            const start = page * historyPageSize;
            const end = start + historyPageSize;
            const pageRecords = filteredRecords.slice(start, end);

            const sampleData = {
                content: pageRecords.map(record => {
                    const source = trafficSourcesMap[record.trafficSourceId];
                    return {
                        id: record.id,
                        ip: record.ip,
                        time: formatDateTime(record.createdAt),
                        duration: source ? formatDuration(source.stayDurationTime) : '0초',
                        scrolled: source ? source.useScroll : false,
                        device: record.userAgent === 'PC' ? 'PC' : 'Mobile',
                        sourceName: source ? removeHttpPrefix(source.trafficSourcePath) : '',
                        userAgent: record.userAgent
                    };
                }),
                totalPages: Math.ceil(filteredRecords.length / historyPageSize),
                page: page
            };

            renderHistory(sampleData);
            historyLoading = false;
        }, 800);
    }

    function showHistorySkeleton() {
        const skeletonHtml = Array(5).fill(0).map(() => `
            <div class="history-card skeleton">
                <div class="skeleton-content">
                    <div class="skeleton-line ip"></div>
                    <div class="skeleton-line meta"></div>
                </div>
            </div>
        `).join('');

        $('#historyList').html(skeletonHtml);
    }

    function renderHistory(data) {
        const $list = $('#historyList');
        $list.empty();

        if (data.content.length === 0) {
            $list.html('<div style="text-align: center; padding: 60px 20px; color: #9ca3af;">트래픽 기록이 없습니다.</div>');
            return;
        }

        data.content.forEach(item => {
            const scrollBadgeClass = item.scrolled ? 'yes' : 'no';
            const scrollBadgeText = item.scrolled ? 'O' : 'X';
            const deviceClass = item.device === 'PC' ? 'pc' : 'mobile';

            const html = `
                <div class="history-card" data-id="${item.id}">
                    <div class="history-ip">${item.ip}</div>
                    <div class="history-main">
                        <div class="history-meta-item">
                            <i class="fas fa-clock"></i>
                            <span>${item.time}</span>
                        </div>
                        <div class="history-meta-item">
                            <i class="fas fa-hourglass-half"></i>
                            <span>${item.duration}</span>
                        </div>
                    </div>
                    <div class="history-source">
                        <div class="history-source-name">${item.sourceName}</div>
                        <div class="history-badges">
                            <span class="scroll-badge ${scrollBadgeClass}">스크롤 ${scrollBadgeText}</span>
                            <span class="device-badge ${deviceClass}">
                                ${item.device}
                                <div class="device-tooltip">${item.userAgent}</div>
                            </span>
                        </div>
                    </div>
                </div>
            `;
            $list.append(html);
        });

        renderHistoryPagination(data.page, data.totalPages);
    }

    function renderHistoryPagination(currentPage, totalPages) {
        const $pagination = $('#historyPagination');
        $pagination.empty();

        const prevDisabled = currentPage === 0 ? 'disabled' : '';
        $pagination.append(`
            <button class="page-button" data-page="${currentPage - 1}" ${prevDisabled}>
                <i class="fas fa-chevron-left"></i>
            </button>
        `);

        const startPage = Math.max(0, currentPage - 2);
        const endPage = Math.min(totalPages - 1, currentPage + 2);

        for (let i = startPage; i <= endPage; i++) {
            const activeClass = i === currentPage ? 'active' : '';
            $pagination.append(`
                <button class="page-button ${activeClass}" data-page="${i}">${i + 1}</button>
            `);
        }

        const nextDisabled = currentPage >= totalPages - 1 ? 'disabled' : '';
        $pagination.append(`
            <button class="page-button" data-page="${currentPage + 1}" ${nextDisabled}>
                <i class="fas fa-chevron-right"></i>
            </button>
        `);
    }

    // ---------------------------------
    // 4. 트래픽 소스 관련 (추가, 수정, 삭제)
    // ---------------------------------
    function openAddSourceModal() {
        currentEditingSourceId = null;
        $('#sourceModalTitle').text('트래픽 소스 추가');
        $('#sourcePathInput').val('');
        $('#sourceHourInput').val(0);
        $('#sourceMinuteInput').val(0);
        $('#sourceSecondInput').val(30);
        $('#scrollDropdown .dropdown-button').attr('data-value', 'true').find('span').first().text('스크롤 포함');
        $('#sourceModal').addClass('show');
        $('body').addClass('overflow-hidden');
    }

    function closeSourceModal() {
        $('#sourceModal').removeClass('show');
        $('body').removeClass('overflow-hidden');
    }

    function editSource(sourceId) {
        currentEditingSourceId = sourceId;
        $('#sourceModalTitle').text('트래픽 소스 편집');

        const source = trafficSourcesMap[sourceId];
        if (source) {
            $('#sourcePathInput').val(source.trafficSourcePath);

            const time = secondsToTimeInputs(source.stayDurationTime);
            $('#sourceHourInput').val(time.hours);
            $('#sourceMinuteInput').val(time.minutes);
            $('#sourceSecondInput').val(time.secs);

            const scrollText = source.useScroll ? '스크롤 포함' : '스크롤 제외';
            $('#scrollDropdown .dropdown-button').attr('data-value', source.useScroll).find('span').first().text(scrollText);
        }

        $('#sourceModal').addClass('show');
        $('body').addClass('overflow-hidden');
    }

    function deleteSource(sourceId) {
        showCustomAlert('트래픽 소스 삭제', '이 트래픽 소스를 삭제하시겠습니까?', [
            {
                text: '삭제',
                class: 'alert-modal-button alert-modal-button-danger',
                action: function () {
                    hideCustomAlert();
                    loadPreloader(0);

                    $.ajax({
                        url: '/api/trafficsource/delete?id=' + sourceId,
                        method: 'DELETE',
                        success: function() {
                            $(`[data-source-id="${sourceId}"]`).fadeOut(300, function() {
                                $(this).remove();
                            });
                            unLoadPreloader(500);
                        },
                        error: function(xhr) {
                            let msg = '트래픽 소스를 삭제할 수 없습니다.';
                            try {
                                if (xhr.responseJSON?.error?.message) {
                                    msg = xhr.responseJSON.error.message;
                                }
                            } catch (e) {}
                            unLoadPreloader(500);
                            showCustomAlert('삭제 실패', msg);
                        }
                    });
                }
            },
            {
                text: '취소',
                class: 'alert-modal-button alert-modal-button-secondary',
                action: function () {
                    hideCustomAlert();
                }
            }
        ]);
    }

    $(document).on('click', '#saveSourceBtn', function() {
        const path = $('#sourcePathInput').val().trim();
        const scroll = $('#scrollDropdown .dropdown-button').attr('data-value') === 'true';
        const duration = timeInputsToSeconds();

        if (!path) {
            alert('트래픽 경로를 입력해주세요.');
            return;
        }

        if (duration < 1) {
            alert('체류 시간을 올바르게 입력해주세요.');
            return;
        }

        const trafficSourceData = {
            projectId: currentProjectId,
            trafficSourcePath: path,
            useScroll: scroll,
            stayDurationTime: duration
        };

        if (currentEditingSourceId) {
            // 수정
            trafficSourceData.id = currentEditingSourceId;

            closeSourceModal();
            loadPreloader(0);

            $.ajax({
                url: '/api/trafficsource/update',
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(trafficSourceData),
                success: function() {
                    unLoadPreloader(500);
                    showCustomAlert('저장 완료', '트래픽 소스가 수정되었습니다.', [{
                        text: '닫기',
                        class: 'alert-modal-button alert-modal-button-secondary',
                        action: function () {
                            window.location.reload();
                        }
                    }]);
                },
                error: function(xhr) {
                    let msg = '트래픽 소스를 수정할 수 없습니다.';
                    try {
                        if (xhr.responseJSON?.error?.message) {
                            msg = xhr.responseJSON.error.message;
                        }
                    } catch (e) {}
                    unLoadPreloader(500);
                    showCustomAlert('수정 실패', msg);
                }
            });
        } else {
            // 추가
            closeSourceModal();
            loadPreloader(0);

            $.ajax({
                url: '/api/trafficsource/create',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(trafficSourceData),
                success: function() {
                    unLoadPreloader(500);
                    showCustomAlert('저장 완료', '트래픽 소스가 추가되었습니다.', [{
                        text: '닫기',
                        class: 'alert-modal-button alert-modal-button-secondary',
                        action: function () {
                            window.location.reload();
                        }
                    }]);
                },
                error: function(xhr) {
                    let msg = '트래픽 소스를 추가할 수 없습니다.';
                    try {
                        if (xhr.responseJSON?.error?.message) {
                            msg = xhr.responseJSON.error.message;
                        }
                    } catch (e) {}
                    unLoadPreloader(500);
                    showCustomAlert('추가 실패', msg);
                }
            });
        }
    });

</script>
</body>
</html>
